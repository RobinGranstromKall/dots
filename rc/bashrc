# Exports
export PATH=$PATH:$HOME/.rbenv/bin:/usr/local/bin:/usr/local/sbin:/usr/local/share/npm/bin:/Users/abros/Documents/javacc-6.0/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/Cellar/ruby193/1.9.3-p547_1/lib/ruby/gems
export NODE_PATH=/usr/local/lib/node:/usr/local/share/npm/lib/node_modules
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export MSF_DATABASE_CONFIG=/opt/msf/database.yml
export MSF_DATABASE_CONFIG=/usr/local/share/metasploit-framework/config/database.yml

if [[ $(uname -s) == "Darwin" ]]; then
	# I am in OS X :)

	# Aliases that only work on OS X
	alias eject_mbp="echo \"Ejecting extra disk: START\"; osascript -e 'quit app \"Dropbox\"'; diskutil eject disk5; diskutil eject disk4; diskutil eject disk3; diskutil eject disk2; diskutil eject disk1; echo \"Ejecting extra disk: DONE\"";
	alias f="open -a 'Finder'";
	alias s="subl";

	# Ruby magic
	if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

	# Bash completions
	if [ -f $(brew --prefix)/etc/bash_completion ]; then
		. $(brew --prefix)/etc/bash_completion
	fi

	[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm";

	# Check for upgrades and updates
	function upgrade() {
		brew update & 
		sudo softwareupdate -i -a;
		wait
		local OUTDATED=$(brew outdated)
		brew upgrade
		brew cleanup -s
		brew doctor
		if echo "$OUTDATED" | grep -q "python[^3]"; then
			pip install --upgrade setuptools && pip install --upgrade pip &
		fi
		if echo "$OUTDATED" | grep -q "python3"; then
			pip3 install --upgrade pip &
		fi
		wait
	}
fi

## Aliases
alias ls="ls -GFh"
alias ll="ls -la"
alias l.="ls -d .*"
alias c="clear"
alias remake="make clean && make"
alias whatsmyip="curl -s https://jsonip.com | grep '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' -o"

# Git aliases
alias g="git"
alias gcm="git commit -m"
alias gst="git status"
alias gco="git checkout"
alias gup="git pull"
alias gad="git add"
alias gph="git push"
alias gcl="git clone"
alias glog="git log --oneline --abbrev-commit --all --graph --decorate --color"

# ???
alias yolo="git pull && git add . && curl -s -X GET http://whatthecommit.com/index.txt | git commit --file - && git push" 

# SSH stuff

# Git magic
if [ -f ~/.git-prompt.sh ]; then
	source ~/.git-prompt.sh
	# Autocomplete for 'g' as well
	complete -o default -o nospace -F _git g
fi

function prompt() {
	# Some colors
	# in future use BLACK=$(tput setaf 0) "setaf". Then echo "${BLACK} blabla"
	local YELLOW="\[\e[0;93m\]"
	local GREEN="\[\e[0;92m\]"
	local RED="\[\e[0;91m\]"
	local PLAIN="\[\e[m\]"

	# Build PS1
	local ps1="$PLAIN$YELLOW\u$PLAIN in $YELLOW\W$PLAIN\n\$ "

	git branch &>/dev/null
	if [ $? -eq 0 ]; then
		# In GIT repo
		local GIT_STATUS=$(git status)
		if echo $GIT_STATUS | grep "nothing to commit" > /dev/null 2>&1; then
			# Nothing to commit
			if echo $GIT_STATUS | grep "Your branch is ahead" > /dev/null 2>&1; then
				# Ahead of origin
				GIT_PROMPT="$GREEN$(__git_ps1 "(%s*) ")"
			else
				# On same rev as origin
				GIT_PROMPT="$GREEN$(__git_ps1 "(%s) ")"
			fi
		else
			# Changes to working tree
			if echo $GIT_STATUS | grep "Changes not staged for commit" > /dev/null 2>&1; then
				# Unadded changes
				GIT_PROMPT="$RED$(__git_ps1 "(%s*) ")"
			else
				# Uncommited changes
				GIT_PROMPT="$RED$(__git_ps1 "(%s) ")"
			fi
		fi
	else 
		# Not in GIT repo
		GIT_PROMPT=""
	fi

	export PS1=$(printf "%s%s" "$GIT_PROMPT" "$ps1")
}
# This command gets executed before loading PS1 (and now it sets up PS1 :) )
PROMPT_COMMAND="prompt"

function record_session() { # Use `exit` or Ctrl+C to stop recording after it has started
	test "$(ps -ocommand= -p $PPID | awk '{print $1}')" == 'script' || (script -q $HOME/log/script.$(date -u +%Y%m%dt%H%M%S).${HOSTNAME:-$(hostname)}.$$.${RANDOM}.log)
}

function sync_fork() {
	git fetch upstream
	git checkout gh-pages
	git merge upstream/master
}
